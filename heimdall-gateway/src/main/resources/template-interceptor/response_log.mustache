import java.util.*;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.springframework.http.HttpHeaders;
import org.springframework.util.ReflectionUtils;
import org.springframework.util.StreamUtils;

import com.google.common.collect.Sets;
import com.netflix.util.Pair;
import com.netflix.zuul.context.RequestContext;

import br.com.conductor.heimdall.core.enums.InterceptorLifeCycle;
import br.com.conductor.heimdall.gateway.filter.HeimdallFilter;
import br.com.conductor.heimdall.gateway.filter.helper.*;
import br.com.conductor.heimdall.gateway.trace.RequestResponseParser;
import br.com.conductor.heimdall.gateway.trace.TraceContextHolder;
import br.com.conductor.heimdall.core.util.UrlUtil;
import br.com.conductor.heimdall.core.util.ContentTypeUtils;
import br.com.conductor.heimdall.middleware.spec.*;
import com.github.thiagonego.alfred.object.Objeto;

public class LogResponseInterceptor extends HeimdallFilter {

     private static Set<String> pathsAllowed;

     private static Set<String> pathsNotAllowed;

     private static String inboundURL;

     private static String method;

     private Helper helper;

     public LogResponseInterceptor() {

          method = "{{method}}";

          pathsAllowed = Sets.newHashSet();
     {{#pathsAllowed}}
          pathsAllowed.add("{{.}}");
     {{/pathsAllowed}}      

          pathsNotAllowed = Sets.newHashSet();
     {{#pathsNotAllowed}}
          pathsNotAllowed.add("{{.}}");
     {{/pathsNotAllowed}}           

          inboundURL = "{{inboundURL}}";

          this.helper = new HelperImpl();

     }

     @Override
     public int filterOrder() {

          return {{order}};
     }

     @Override
     public String filterType() {

          return "{{executionPoint}}";
     }

     @Override
     public boolean should() {
          return InterceptorLifeCycle.{{lifeCycle}}.filter(pathsAllowed, pathsNotAllowed, inboundURL, method, RequestContext.getCurrentContext().getRequest());
     }
     
     @Override
     public String getName() {
     	return "{{name}}"
     }

     @Override
     public void execute() throws Throwable {

          RequestContext ctx = RequestContext.getCurrentContext();
          Map<String, String> headers = new HashMap<>();
          List<Pair<String, String>> originResponseHeaders = ctx.getOriginResponseHeaders();
          for (Pair<String, String> pair : originResponseHeaders) {
               headers.put(pair.first(), pair.second());
          }
          RequestResponseParser r = new RequestResponseParser();
          r.setUri(UrlUtil.getCurrentUrl(ctx.getRequest()));
          r.setHeaders(headers);

          String content = headers.get(HttpHeaders.CONTENT_TYPE);

          // if the content type is not defined by api server then permit to read the body. Prevent NPE
          if (Objeto.isBlank(content)) content = "";

          String[] types = content.split(";");

          if (!ContentTypeUtils.belongsToBlackList(types)) {
               InputStream stream = ctx.getResponseDataStream();
               String body = StreamUtils.copyToString(stream, Charset.forName("UTF-8"));
               r.setBody(body);
               ctx.setResponseDataStream(new ByteArrayInputStream(body.getBytes("UTF-8")));
          }
               
          TraceContextHolder.getInstance().getActualTrace().setResponse(r);
     }
          
}
