import static br.com.conductor.heimdall.core.util.Constants.INTERRUPT;

import java.util.*;

import com.google.common.collect.Sets;
import com.netflix.zuul.context.RequestContext;

import br.com.conductor.heimdall.core.enums.InterceptorLifeCycle;
import br.com.conductor.heimdall.gateway.filter.helper.*;
import br.com.conductor.heimdall.gateway.filter.HeimdallFilter;
import br.com.conductor.heimdall.gateway.trace.TraceContextHolder;
import br.com.conductor.heimdall.middleware.spec.*;

public class MiddlewareInterceptor extends HeimdallFilter {

     private static Set<String> pathsAllowed;

     private static Set<String> pathsNotAllowed;

     private static String inboundURL;

     private static String method;
     
     private Middleware m;

     private Helper helper;

     public MiddlewareInterceptor() {

          method = "{{method}}";
          m = new Middleware("{{{pathMiddleware}}}");

          pathsAllowed = Sets.newHashSet();
     {{#pathsAllowed}}
          pathsAllowed.add("{{.}}");
     {{/pathsAllowed}}      

          pathsNotAllowed = Sets.newHashSet();
     {{#pathsNotAllowed}}
          pathsNotAllowed.add("{{.}}");
     {{/pathsNotAllowed}}           

          inboundURL = "{{inboundURL}}";

          this.helper = new HelperImpl();

     }

     @Override
     public int filterOrder() {

          return {{order}};
     }

     @Override
     public String filterType() {

          return "{{executionPoint}}";
     }

     @Override
     public boolean should() {

          RequestContext ctx = RequestContext.getCurrentContext();
          Boolean interrupt = ctx.get(INTERRUPT) ? false : (Boolean) ctx.get(INTERRUPT);

          return !interrupt && InterceptorLifeCycle.{{lifeCycle}}.filter(pathsAllowed, pathsNotAllowed, inboundURL, method, RequestContext.getCurrentContext().getRequest());
     }
     
     @Override
     public String getName() {
     	return "{{name}}"
     }

     @Override
     public void execute() throws Throwable {
          
          RequestContext ctx = RequestContext.getCurrentContext();
          ctx.setSendZuulResponse(false);
          
          def middleware = m.instance("{{{content}}}");
          middleware.run(helper);
          
     }

}