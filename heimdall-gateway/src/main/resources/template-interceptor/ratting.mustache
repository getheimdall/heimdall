import br.com.conductor.heimdall.core.enums.InterceptorLifeCycle;
import br.com.conductor.heimdall.core.util.BeanManager;
import br.com.conductor.heimdall.gateway.filter.HeimdallFilter;
import br.com.conductor.heimdall.gateway.service.LifeCycleService;
import br.com.conductor.heimdall.gateway.service.RattingInterceptorService;

import com.netflix.zuul.context.RequestContext;

import java.util.HashSet;
import java.util.Set;

public class RateLimitInterceptor extends HeimdallFilter {

    private static Set<String> pathsAllowed;

    private static Set<String> pathsNotAllowed;

    private static String inboundURL;

    private static String method;

    private static Long referenceId;

    public RateLimitInterceptor() {

        method = "{{method}}";

        pathsAllowed = new HashSet<>();
        {{#pathsAllowed}}
        pathsAllowed.add("{{.}}");
        {{/pathsAllowed}}

        pathsNotAllowed = new HashSet<>();
        {{#pathsNotAllowed}}
        pathsNotAllowed.add("{{.}}");
        {{/pathsNotAllowed}}

        inboundURL = "{{inboundURL}}";

        referenceId = {{referenceId}};

    }

    @Override
    public String filterType() {

        return "{{executionPoint}}";
    }

    @Override
    public int filterOrder() {

        return {{order}};
    }

    @Override
    public String getName() {
        return "{{name}}"
    }

    @Override
    public boolean should() {

        LifeCycleService lifeCycleService = (LifeCycleService) BeanManager.getBean(LifeCycleService.class);
        return lifeCycleService.should(InterceptorLifeCycle.{{lifeCycle}}, pathsAllowed, pathsNotAllowed, inboundURL, method, RequestContext.getCurrentContext().getRequest(), referenceId);
    }

    @Override
    public void execute() throws Throwable {
        RattingInterceptorService rattingInterceptorService = (RattingInterceptorService) BeanManager.getBean(RattingInterceptorService.class);
        rattingInterceptorService.execute("{{name}}", "{{path}}");
    }

}
