
import static br.com.conductor.heimdall.core.util.Constants.INTERRUPT;

import java.util.*;

import javax.servlet.http.HttpServletRequest;

import org.springframework.http.HttpStatus;
import org.springframework.util.ReflectionUtils;

import com.google.common.collect.Sets;
import com.netflix.zuul.context.RequestContext;

import br.com.conductor.heimdall.gateway.filter.helper.*;
import br.com.conductor.heimdall.core.entity.AccessToken;
import br.com.conductor.heimdall.core.enums.InterceptorLifeCycle;
import br.com.conductor.heimdall.core.enums.Location;
import br.com.conductor.heimdall.gateway.filter.HeimdallFilter;
import br.com.conductor.heimdall.gateway.service.SecurityService;
import br.com.conductor.heimdall.gateway.trace.TraceContextHolder;
import br.com.conductor.heimdall.core.util.BeanManager;
import br.com.conductor.heimdall.core.util.ConstantsInterceptors;
import br.com.conductor.heimdall.core.util.DigestUtils;
import br.com.conductor.heimdall.middleware.spec.*;
import br.com.twsoftware.alfred.object.Objeto;

public class AccessTokenInterceptor extends HeimdallFilter {

     private static Set<String> pathsAllowed;

     private static Set<String> pathsNotAllowed;

     private static String inboundURL;

     private static String method;

     private SecurityService securityService;

     private Helper helper;

     public AccessTokenInterceptor() {

          method = "{{method}}";

          pathsAllowed = Sets.newHashSet();
     {{#pathsAllowed}}
          pathsAllowed.add("{{.}}");
     {{/pathsAllowed}}      

          pathsNotAllowed = Sets.newHashSet();
     {{#pathsNotAllowed}}
          pathsNotAllowed.add("{{.}}");
     {{/pathsNotAllowed}}           

          inboundURL = "{{inboundURL}}";

          this.helper = new HelperImpl();

     }

     @Override
     public int filterOrder() {

          return {{order}};
     }

     @Override
     public String filterType() {

          return "{{executionPoint}}";
     }

     @Override
     public boolean should() {

          return InterceptorLifeCycle.{{lifeCycle}}.filter(pathsAllowed, pathsNotAllowed, inboundURL, method, RequestContext.getCurrentContext().getRequest());
     }
     
     @Override
     public String getName() {
     	return "{{name}}"
     }

     public Long getApiId() {
          return {{apiId}};
     }

     @Override
     public void execute() throws Throwable {

          securityService = (SecurityService) BeanManager.getBean(SecurityService.class);
          RequestContext ctx = RequestContext.getCurrentContext();
          HttpServletRequest request = ctx.getRequest();          

          String accessToken = null;
          String clientId = null;
          Location location = Location.valueOf("{{location}}");
          String nameAccessToken = Objeto.notBlank("{{name}}") ? "{{name}}" : "access_token";
          String nameClientId = Objeto.notBlank("{{client_id}}") ? "{{client_id}}" : "client_id";
          if (Location.HEADER.equals(location)) {
               
               accessToken = helper.call().request().header().get(nameAccessToken);
               clientId = helper.call().request().header().get(nameClientId);
          } else {
               
               accessToken = request.getParameter(nameAccessToken);               
               clientId = request.getParameter(nameClientId);       
          }

          securityService.validadeAccessToken(ctx, helper, getApiId(), clientId, accessToken);       

     }     

}
