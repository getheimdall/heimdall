<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>br.com.conductor.heimdall</groupId>
		<artifactId>heimdall</artifactId>
		<version>1.1.65-SNAPSHOT</version>
	</parent>
	<artifactId>heimdall-gateway</artifactId>
	<name>heimdall-gateway</name>
	<packaging>jar</packaging>

	<properties>
		<docker.imageName>getheimdall/heimdall-gateway</docker.imageName>
		<docker.serverId>docker-hub</docker.serverId>
		<docker.registryUrl>https://hub.docker.com/</docker.registryUrl>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20171018</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zuul</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>			
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.vaadin.external.google</groupId>
					<artifactId>android-json</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.netflix.netflix-commons</groupId>
			<artifactId>netflix-commons-util</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>5.2.12.Final</version>
		</dependency>
		<dependency>
			<groupId>br.com.conductor.heimdall</groupId>
			<artifactId>heimdall-core</artifactId>	
		</dependency>
		<dependency>
			<groupId>br.com.conductor.heimdall</groupId>
			<artifactId>heimdall-middleware-spec</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>io.gatling.highcharts</groupId>
			<artifactId>gatling-charts-highcharts</artifactId>
		</dependency>
		<dependency>
			<groupId>io.gatling</groupId>
			<artifactId>gatling-app</artifactId>
		</dependency>
		<dependency>
			<groupId>io.gatling</groupId>
			<artifactId>gatling-recorder</artifactId>
		</dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
		</dependency>
		<dependency>
            <groupId>org.mongodb.morphia</groupId>
            <artifactId>morphia</artifactId>
            <version>1.3.1</version>
        </dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.vaadin.external.google</groupId>
					<artifactId>android-json</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>io.gatling</groupId>
				<artifactId>gatling-app</artifactId>
				<version>${gatling.version}</version>
			</dependency>
			<dependency>
				<groupId>io.gatling</groupId>
				<artifactId>gatling-recorder</artifactId>
				<version>${gatling.version}</version>
			</dependency>
			<dependency>
				<groupId>io.gatling.highcharts</groupId>
				<artifactId>gatling-charts-highcharts</artifactId>
				<version>${gatling.version}</version>
			</dependency>
			<dependency>
				<groupId>org.scala-lang</groupId>
				<artifactId>scala-library</artifactId>
				<version>${scala.version}</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<build>
		<finalName>heimdall-gateway</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*</include>
				</includes>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.1</version>
				<configuration>
					<baseImage>java:openjdk-8-jdk-alpine</baseImage>
					<imageName>${docker.imageName}</imageName>
					<entryPoint>["java", "-Xmx4g", "-Xms1g",  "-jar", "/${project.build.finalName}.jar"]</entryPoint>
					<forceTags>true</forceTags>
					<serverId>${docker.serverId}</serverId>
					<registryUrl>${docker.registryUrl}</registryUrl>
					<imageTags>
						<imageTag>${project.version}</imageTag>
						<imageTag>latest</imageTag>
					</imageTags>
					<resources>
                        <resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
			
			<plugin>
				<groupId>io.gatling</groupId>
				<artifactId>gatling-maven-plugin</artifactId>
				<version>${gatling.version}</version>
				<configuration>
					<resultsFolder>${project.basedir}/target/gatling/results</resultsFolder>
					<runMultipleSimulations>true</runMultipleSimulations>
					<!-- <disableCompiler>true</disableCompiler> -->
					<!-- <reportsOnly>ttt</reportsOnly> -->
					<!-- <noReports>false</noReports> -->
				</configuration>
				<!-- <executions> -->
				<!-- <execution> -->
				<!-- <phase>test</phase> -->
				<!-- <goals><goal>execute</goal></goals> -->
				<!-- </execution> -->
				<!-- </executions> -->
			</plugin>
			
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>dev</id>
			<activation>
            	<activeByDefault>true</activeByDefault>
        	</activation>
			<build>				
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<arguments>
								<argument>--spring.profiles.active=dev</argument>
							</arguments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>		
	</profiles>

	<description>In this project we built our algorithm over the Netflix Zuul. We put some steroids on the Zuul Filters, add some criterias to make the match routes more rigid (like the HTTP Verb on the match). And to manager the request/response and Zuul Filters flow we put a message broker (RabbitMQ) to communicate with the API.</description>
</project>